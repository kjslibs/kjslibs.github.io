
DOCUMENTARY

CLASS: ShapeCreationContext

	DESCRIPTION:
		Creating shapes to draw in WebGL
	END DESCRIPTION
	
	public class ShapeCreationContext {
		public constructor ShapeCreationContext(VertexArrayBuffer buffer);
		public readonly VertexArrayBuffer buffer;
		public void makeVertices(uint count, VertexMap vertices, sequence<uint, count> ordinal);
		[[frozen]] public static const sequence<uint, 3> TRIANGLE_TRIANGLE = [0, 1, 2];
		[[frozen]] public static const sequence<uint, 3> TRIANGLE_TRIANGLE_STRIP_BEGIN = [0, 1, 2];
		[[frozen]] public static const sequence<uint, 1> TRIANGLE_TRIANGLE_STRIP_NEXT = [0];
		[[frozen]] public static const sequence<uint, 3> TRIANGLE_TRIANGLE_FAN_BEGIN = [0, 1, 2];
		[[frozen]] public static const sequence<uint, 1> TRIANGLE_TRIANGLE_FAN_NEXT = [0];
		[[frozen]] public static const sequence<uint, 6> QUADRANGLE_TRIANGLE = [0, 1, 3, 1, 2, 3];
		[[frozen]] public static const sequence<uint, 4> QUADRANGLE_TRIANGLE_STRIP_BEGIN = [0, 1, 3, 2];
		[[frozen]] public static const sequence<uint, 2> QUADRANGLE_TRIANGLE_STRIP_NEXT = [0, 1];
		[[frozen]] public static const sequence<uint, 4> QUADRANGLE_TRIANGLE_FAN_BEGIN = [0, 1, 2, 3];
		[[frozen]] public static const sequence<uint, 2> QUADRANGLE_TRIANGLE_FAN_NEXT = [0, 1];
		public static function<void, void, float, float> POLYGON_MATRIX_MAKER([[out]] sequence<float> buffer, optional uint first = 0, uint offset = 0);
		public static void makeTangentialPolygonOfCircle([[polygon]] uint vertices_count, [[mapper]] function<optional Boolean, void, float, float> mapper);
		public static void makeCyclicPolygonOfCircle([[polygon]] uint vertices_count, [[mapper]] function<optional Boolean, void, float, float> mapper);
		public static class BuiltInVertex;
		public static class BuiltInVertexArrayBuffer : VertexArrayBuffer;
		public static class BuiltInVertexMap : VertexMap;
	}
	
	class ShapeCreationContext::BuiltInVertex {
		public BuiltInVertexMapBase base;
		public uint index;
	}
	
	class ShapeCreationContext::BuiltInVertexArrayBuffer {
		public constructor BuiltInVertexArrayBuffer(BuiltInVertexArrayBufferBase base, uint dim_count);
		public readonly BuiltInVertexArrayBufferBase base;
		public readonly uint dimCount;
		public void set(uint index, BuiltInVertex vertex);
		public void write([[out]] sequence<any> target, optional uint first = 0, optional uint offset = 0);
	}
	
	class ShapeCreationContext::BuiltInVertexMap {
		public constructor BuiltInVertexMap(BuiltInVertexMapBase base, uint first, uint dim_count);
		public readonly BuiltInVertexMapBase base;
		public readonly uint dimCount;
		public Iterator<BuiltInVertex> @@iterator();
	}
	
	pattern BuiltInVertexArrayBufferBase;
	
	pattern BuiltInVertexMapBase;
	
	struct VertexArrayBuffer {
		void set(uint index, Vertex vertex);
	}
	
	struct VertexMap {
		Iterator<Vertex> @@iterator();
	}
	
	template <class value_t>
	struct Iterator {
		IteratingResult<value_t> next();
	}
	
	template <class value_t>
	struct IteratingResult {
		[[out]] value_t value;
	}
	
	[[Vertex]] pattern Vertex;

END CLASS

EXPLAIN:

	[[Vertex]]
	
		pattern Vertex;
		
		 - Represent a vertex.
	
	[[frozen]]
	
		public const ...;
		
		 - The object is frozen to ensure that it is a constant.
		
		public Object createPolygonOrdinal(String, uint);
		
		 - The function returns a frozen object.
	
	[[polygon]]
	
		uint vertices_count;
		
		 - The parameter 'vertices_count' must be an integer greater than or equal to 3 create a complete polygon.
	
	[[mapper]]
	
		function<optional Boolean, ...> mapper;
		
		 - If 'mapper' returns true (or a truly value), the iterating process will finish instantly.

END EXPLAIN