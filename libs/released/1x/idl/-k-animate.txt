
DOCUMENTARY

CLASS: Animate

	DECRIPTION:
		Use requestAnimationFrame
		Allow to control animation easier
	END DECRIPTION
	
	shared class prvAnimate {
		public constructor prvAnimate(Animate object, function<void, Animate, AnimateParam> callback);
		public Animate object;
		public function<void, Animate, AnimateParam> callback;
		public bool paused;
		public float last;
		public float now;
		public float duration;
		public void pause();
		public void run();
	}
	
	public class Animate {
		private function<void, Animate, AnimateParam> callback;
		public constructor Animate(function<void, Animate, AnimateParam> callback);
		public bool paused;
		public readonly float last;
		public readonly float now;
		public readonly float duration;
		public void pause();
		public void run();
	}
	
	private class AnimateParam {
		float now;
		float last;
		float duration;
	}
	
	friend VectorAnimator;

END CLASS

CLASS: Stage

	DESCRIPTION:
		Has a impact detector as a functor
		Has a impact handler as a functor
		Append with an actor (called 'l-actor') and contains the other actors (called 'r-actor')
		There're three kinds of impact: FIRST_IMPACT, WHILE_IMPACT, AFTER_IMPACT. They're called 'Impact type'
		Impact type's being in form of Integer, String or Symbol depends on document.currentScript->kani-enum-type is set to "int", "string" or "symbol". It will be Symbol by default 
	END DECRIPTION
	
	public class Stage {
		private ImpactDetector impact_detector;
		private ImpactHandler impact_handler;
		shared Object r_actor;
		public constructor Stage(ImpactDetector impact_detector, ImpactHandler impact_handler, RActor r_actor);
		public void add(RActor r_actor);
		public void remove(RActor r_actor);
		public void update();
	}
	
	typedef function<bool, Stage, LActor, RActor> ImpactDetector;
	
	typedef function<void, Stage, LActor, RActor, ImpactType> ImpactHandler;
	
	typedef any LActor, RActor;
	
	enum ImpactType {
		FIRST_IMPACT,
		WHILE_IMPACT,
		AFTER_IMPACT
	}

END CLASS

CLASS: AnimateRepublic, AnimateCivilian

	DECRIPTION:
		Republic/Civilian + Animate
	END DESCRIPTION
	
	public class AnimateRepublic {
		shared _kJs_Republic republic;
		shared Animate animate;
		public constructor AnimateRepublic(Animate animate);
		public void add(AnimateCivilian animate_civilian);
		public void remove(AnimateCivilian animate_civilian);
		public void execute();
		public readonly Number size;
	}
	
	public class AnimateCivilian {
		shared _kJs_Civilian civilian;
		public constructor AnimateCivilian();
		public void request();
		public void unrequest();
		public void enter(AnimateRepublic animate_republic);
		public void leave(AnimateRepublic animate_republic);
	}

END CLASS

CLASS: VectorAnimator

	DESCRIPTION:
		Create animate which control value of vector
	END DECRIPTION
	
	public class VectorAnimator {
		private VecAdder vecadder;
		public constructor VectorAnimator(VecAdder vecadder);
		public Animate createAnimate(LVec l_vec, RVec r_vec);
	}
	
	typedef function<void, VectorAnimator, LVec, RVec, AnimateParam, Animate> VecAdder;
	
	typedef any LVec, RVec;

END CLASS